{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["operations","App","initialGrid","rows","i","push","Array","from","randomGrid","Math","random","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","currentGrid","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","onClick","style","display","gridTemplateColumns","map","col","newGrid","handleCellClick","width","height","border","margin","backgroundColor","undefined","boxShadow","borderRadius","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f9355f2.chunk.js","sourcesContent":["import React, {useState, useCallback, useRef} from 'react';\nimport produce from 'immer';\n\nconst numRows = 30;\nconst numCols = 30;\nconst simulationSpeed = 50;\nconst randCoefficient = 0.8;\n\n// used to find all neighbors\nconst operations = [\n  [0,1],\n  [0,-1],\n  [1,-1],\n  [-1,1],\n  [1,1],\n  [-1,-1],\n  [1,0],\n  [-1,0]\n];\n\nconst App = () => {\n\n  const initialGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++){\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n    return rows;\n  }\n\n  const randomGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++){\n      rows.push(Array.from(Array(numCols), () => Math.random() > randCoefficient ? 1 : 0));\n    }\n    return rows;\n  }\n\n  \n  const [grid, setGrid] = useState(initialGrid);\n  const handleCellClick = (i, k) => {\n    const newGrid = produce(grid, gridCopy => {\n      gridCopy[i][k] = grid[i][k] ? 0 : 1;\n    });\n    setGrid(newGrid);\n  }\n\n  const [running, setRunning] = useState(false);\n\n  \n  const runningRef = useRef();\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current){\n      return;\n    }\n    // simulate\n    setGrid((currentGrid) => {\n      return produce(currentGrid, gridCopy => {\n        for (let i = 0; i < numRows; i++){\n          for (let k = 0; k < numCols; k++){\n            let neighbors = 0;\n            operations.forEach(([x,y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols){\n                neighbors += gridCopy[newI][newK];\n              }\n            })\n\n            if (neighbors < 2 || neighbors > 3){\n              gridCopy[i][k] = 0;\n            } else if (currentGrid[i][k] === 0 && neighbors === 3){\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      })\n    })\n\n    setTimeout(runSimulation, simulationSpeed);\n  }, []);\n\n  return <div>\n    <button onClick={() => {\n      setRunning(!running);\n      if (!running){\n        runningRef.current = true;\n        runSimulation();\n      }\n      \n    }}>\n      {running ? \"stop\" : \"start\"}\n    </button>\n    <button onClick={() => setGrid(initialGrid)}>\n      clear\n    </button>\n    <button onClick={() => setGrid(randomGrid)}>\n      random\n    </button>\n    <div style={{\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols}, 20px)`,\n    }}>\n      {grid.map((rows, i) => \n        rows.map((col, k) => (\n          <div \n            onClick={() => handleCellClick(i,k)}\n            key={`${i}-${k}`} \n            style={{\n                width: 20, \n                height: 20, \n                border: '1px solid #333', \n                margin: '0 10px',\n                backgroundColor: grid[i][k] ? '#293D0E' : undefined,\n              boxShadow: '0 1px blue',\n            borderRadius: '4px'}}\n            >\n\n          </div>\n      )))}\n    </div>\n  </div>;\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}