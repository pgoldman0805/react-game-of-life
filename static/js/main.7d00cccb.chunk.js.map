{"version":3,"sources":["components/Grid.js","hooks/useGrid.js","App.js","reportWebVitals.js","index.js"],"names":["Grid","grid","handleCellClick","style","display","gridTemplateColumns","length","map","rows","i","col","k","onClick","width","height","border","margin","backgroundColor","undefined","boxShadow","borderRadius","useGrid","passedCoefficient","initialGrid","push","Array","from","useState","setGrid","numRows","numCols","operations","randomGrid","Math","random","newGrid","produce","gridCopy","App","speed","setSpeed","coefficient","setCoefficient","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","currentGrid","neighbors","forEach","x","y","newI","newK","setTimeout","useEffect","flexDirection","type","name","min","max","step","onChange","e","Number","parseFloat","currentTarget","value","handleUpdateCoeffecient","console","log","parseInt","handleUpdateSpeed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d00cccb.chunk.js","sourcesContent":["export const Grid = ({grid, handleCellClick}) => {\r\n    return (\r\n        <div style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: `repeat(${grid[0].length}, 20px)`,\r\n        }}>\r\n            {grid.map((rows, i) => \r\n                rows.map((col, k) => (\r\n                <div \r\n                    onClick={() => handleCellClick(i,k)}\r\n                    key={`${i}-${k}`} \r\n                    style={{\r\n                        width: 20, \r\n                        height: 20, \r\n                        border: '1px solid #333', \r\n                        margin: '0 10px',\r\n                        backgroundColor: grid[i][k] ? '#293D0E' : undefined,\r\n                    boxShadow: '0 1px blue',\r\n                    borderRadius: '4px'}}\r\n                    >\r\n\r\n                </div>\r\n            )))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid;","import {useState} from 'react';\r\nimport produce from 'immer';\r\n\r\nexport const useGrid = (passedCoefficient) => {\r\n    const numRows = 30;\r\n    const numCols = 30;\r\n    \r\n\r\n    // used to find all neighbors\r\n    const operations = [\r\n        [0,1],\r\n        [0,-1],\r\n        [1,-1],\r\n        [-1,1],\r\n        [1,1],\r\n        [-1,-1],\r\n        [1,0],\r\n        [-1,0]\r\n    ];\r\n    const initialGrid = () => {\r\n        const rows = [];\r\n        for (let i = 0; i < numRows; i++){\r\n        rows.push(Array.from(Array(numCols), () => 0));\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    const randomGrid = () => {\r\n        const rows = [];\r\n        for (let i = 0; i < numRows; i++){\r\n        rows.push(Array.from(Array(numCols), () => Math.random() > passedCoefficient ? 1 : 0));\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    \r\n\r\n    const [grid, setGrid] = useState(initialGrid);\r\n    const handleCellClick = (i, k) => {\r\n        const newGrid = produce(grid, gridCopy => {\r\n        gridCopy[i][k] = grid[i][k] ? 0 : 1;\r\n        });\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    return {\r\n        numRows,\r\n        numCols,\r\n        operations,\r\n        initialGrid,\r\n        randomGrid,\r\n        grid,\r\n        setGrid,\r\n        handleCellClick\r\n    };\r\n}\r\n\r\nexport default useGrid;","import React, {useState, useCallback, useRef} from 'react';\nimport Grid from './components/Grid';\nimport useGrid from './hooks/useGrid';\nimport { produce } from 'immer';\nimport { useEffect } from 'react';\n\n\nconst initialSimulationSpeed = 50;\nconst initCoefficient = 0.5;\n\nconst App = () => {\n\n  const [speed, setSpeed] = useState(initialSimulationSpeed);\n  const [coefficient, setCoefficient] = useState(initCoefficient);\n\n  const {\n    numRows,\n        numCols,\n        operations,\n        initialGrid,\n        randomGrid,\n        grid,\n        setGrid,\n        handleCellClick\n  } = useGrid(coefficient);\n\n  const [running, setRunning] = useState(false);\n  const runningRef = useRef();\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current){\n      return;\n    }\n    // simulate\n    setGrid((currentGrid) => {\n      return produce(currentGrid, gridCopy => {\n        for (let i = 0; i < numRows; i++){\n          for (let k = 0; k < numCols; k++){\n            let neighbors = 0;\n            operations.forEach(([x,y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols){\n                neighbors += gridCopy[newI][newK];\n              }\n            })\n\n            if (neighbors < 2 || neighbors > 3){\n              gridCopy[i][k] = 0;\n            } else if (currentGrid[i][k] === 0 && neighbors === 3){\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      })\n    })\n\n    setTimeout(runSimulation, speed);\n  }, [speed, setSpeed]);\n\n  const toggleStartStop = () => {\n    setRunning(!running);\n    if (!running){\n      runningRef.current = true;\n      runSimulation();\n    }\n  }\n  useEffect(() => {\n    runSimulation();\n  }, [speed, coefficient, runSimulation]);\n  const handleUpdateCoeffecient = (e) => {\n      setCoefficient(Number.parseFloat(e.currentTarget.value));  \n  }\n  const handleUpdateSpeed = (e) => {\n    console.log(`oldSpeed: ${speed}`);\n    setSpeed(Number.parseInt(e.currentTarget.value));\n    console.log(`newSpeed: ${speed}`);\n  }\n\n  return (\n  <div style={{display: 'flex', flexDirection: 'column'}}>\n    <aside style={{margin: 20}}>\n      <button onClick={toggleStartStop}>{running ? \"stop\" : \"start\"}</button>\n      <button onClick={() => setGrid(initialGrid)}>clear</button>\n      <button onClick={() => setGrid(randomGrid)}>random</button>\n      <label>Set coefficient</label>\n      <input type='range' name=\"coefficient\" min=\"0\" max=\"1\" step=\"0.1\" onChange={(e) => handleUpdateCoeffecient(e)} value={coefficient}/>\n      <label>Set Speed</label>\n      <input type='range' name=\"speed\" min=\"50\" max=\"3000\" step=\"10\" onChange={(e) => handleUpdateSpeed(e)} value={speed}/>\n    </aside>\n\n    <Grid \n      grid={grid}\n      handleCellClick={handleCellClick}\n      />\n  </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}